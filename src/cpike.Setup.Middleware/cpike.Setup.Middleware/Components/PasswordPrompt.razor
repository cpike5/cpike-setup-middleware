@using cpike.Setup.Middleware.Services
@using cpike.Setup.Middleware.Models
@inject ISetupPasswordService PasswordService
@inject Microsoft.Extensions.Logging.ILogger<PasswordPrompt> Logger

<div class="password-prompt-container">
    <div class="password-prompt">
        <div class="prompt-header">
            <h1>Setup Wizard</h1>
            <div class="lock-icon">üîí</div>
        </div>

        <div class="prompt-body">
            <h2>Password Required</h2>
            <p class="instructions">
                To access the setup wizard, please enter the password that was displayed in the console when the application started.
            </p>

            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="alert alert-danger">
                    @_errorMessage
                </div>
            }

            @if (_isLockedOut)
            {
                <div class="alert alert-warning">
                    <strong>Too Many Attempts</strong>
                    <p>Please wait @_secondsRemaining seconds before trying again.</p>
                </div>
            }
            else
            {
                <div class="form-group">
                    <label for="setupPassword">Setup Password</label>
                    <input
                        type="password"
                        id="setupPassword"
                        class="form-control"
                        @bind="Password"
                        @bind:event="oninput"
                        @onkeypress="HandleKeyPress"
                        placeholder="XXXX-XXXX-XXXX-XXXX"
                        disabled="@_isValidating"
                        autofocus />
                    <small class="form-text">Enter the password exactly as shown in the console, including dashes.</small>
                </div>

                @if (_remainingAttempts > 0 && _remainingAttempts < 5)
                {
                    <div class="attempts-warning">
                        ‚ö†Ô∏è @_remainingAttempts attempt(s) remaining
                    </div>
                }

                <button
                    class="btn btn-primary btn-block"
                    @onclick="ValidatePasswordAsync"
                    disabled="@(_isValidating || string.IsNullOrWhiteSpace(Password))">
                    @if (_isValidating)
                    {
                        <span>Validating...</span>
                    }
                    else
                    {
                        <span>Continue</span>
                    }
                </button>
            }

            <div class="help-text">
                <p><strong>Where to find the password:</strong></p>
                <ul>
                    <li>Check the application console output when it started</li>
                    <li>Look for a message with "SETUP WIZARD PASSWORD"</li>
                    <li>The password is also saved in a file in the App_Data directory</li>
                </ul>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback OnPasswordVerified { get; set; }

    private string Password { get; set; } = string.Empty;
    private bool _isValidating = false;
    private string? _errorMessage;
    private int _remainingAttempts = 5;
    private bool _isLockedOut = false;
    private int _secondsRemaining = 0;

    private async Task ValidatePasswordAsync()
    {
        if (string.IsNullOrWhiteSpace(Password))
        {
            return;
        }

        _isValidating = true;
        _errorMessage = null;

        try
        {
            var result = await PasswordService.ValidatePasswordAsync(Password);

            if (result.IsValid)
            {
                Logger.LogInformation("Password verified successfully");
                await OnPasswordVerified.InvokeAsync();
            }
            else
            {
                if (result.IsLockedOut)
                {
                    _isLockedOut = true;
                    _secondsRemaining = result.SecondsUntilNextAttempt;
                    _errorMessage = result.ErrorMessage;
                    StartLockoutCountdown();
                }
                else
                {
                    _errorMessage = result.ErrorMessage;
                    _remainingAttempts = result.RemainingAttempts;
                    Password = string.Empty; // Clear password on failure
                }

                Logger.LogWarning("Password validation failed: {Error}", result.ErrorMessage);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error validating password");
            _errorMessage = "An error occurred while validating the password.";
        }
        finally
        {
            _isValidating = false;
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(Password) && !_isValidating)
        {
            await ValidatePasswordAsync();
        }
    }

    private void StartLockoutCountdown()
    {
        var timer = new System.Timers.Timer(1000);
        timer.Elapsed += (sender, e) =>
        {
            _secondsRemaining--;
            if (_secondsRemaining <= 0)
            {
                _isLockedOut = false;
                timer.Stop();
                timer.Dispose();
            }
            InvokeAsync(StateHasChanged);
        };
        timer.Start();
    }
}

<style>
    .password-prompt-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: var(--setup-bg-gray, #F5F7FA);
        padding: 16px;
    }

    .password-prompt {
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        max-width: 500px;
        width: 100%;
        overflow: hidden;
    }

    .prompt-header {
        background: var(--setup-primary-blue, #4A90E2);
        color: white;
        padding: 32px;
        text-align: center;
    }

    .prompt-header h1 {
        margin: 0 0 16px 0;
        font-size: 24px;
    }

    .lock-icon {
        font-size: 48px;
    }

    .prompt-body {
        padding: 32px;
    }

    .prompt-body h2 {
        margin: 0 0 8px 0;
        font-size: 20px;
        color: var(--setup-text-dark, #333);
    }

    .instructions {
        margin: 0 0 24px 0;
        color: var(--setup-text-light, #666);
        line-height: 1.5;
    }

    .form-group {
        margin-bottom: 24px;
    }

    .form-group label {
        display: block;
        margin-bottom: 8px;
        font-weight: 500;
        color: var(--setup-text-dark, #333);
    }

    .form-control {
        width: 100%;
        padding: 12px;
        font-size: 16px;
        border: 1px solid var(--setup-border-gray, #E1E8ED);
        border-radius: 4px;
        font-family: monospace;
        letter-spacing: 2px;
    }

    .form-control:focus {
        outline: none;
        border-color: var(--setup-primary-blue, #4A90E2);
        box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
    }

    .form-text {
        display: block;
        margin-top: 4px;
        font-size: 13px;
        color: var(--setup-text-light, #666);
    }

    .attempts-warning {
        margin-bottom: 16px;
        padding: 8px 12px;
        background: #FFF5E6;
        border: 1px solid #FFD700;
        border-radius: 4px;
        color: #CC8800;
        font-size: 14px;
    }

    .btn-block {
        width: 100%;
    }

    .help-text {
        margin-top: 32px;
        padding-top: 24px;
        border-top: 1px solid var(--setup-border-gray, #E1E8ED);
        font-size: 14px;
        color: var(--setup-text-light, #666);
    }

    .help-text strong {
        color: var(--setup-text-dark, #333);
    }

    .help-text ul {
        margin: 8px 0 0 0;
        padding-left: 20px;
    }

    .help-text li {
        margin-bottom: 4px;
        line-height: 1.5;
    }

    .alert {
        padding: 12px 16px;
        margin-bottom: 16px;
        border-radius: 4px;
    }

    .alert-danger {
        background: #FFF5F5;
        border: 1px solid var(--setup-error-red, #D0021B);
        color: var(--setup-error-red, #D0021B);
    }

    .alert-warning {
        background: #FFF5E6;
        border: 1px solid var(--setup-warning-orange, #F5A623);
        color: #CC8800;
    }

    .alert strong {
        display: block;
        margin-bottom: 4px;
    }
</style>
