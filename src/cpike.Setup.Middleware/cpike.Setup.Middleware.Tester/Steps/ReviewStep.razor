@using cpike.Setup.Middleware.Steps
@using cpike.Setup.Middleware.Models
@using cpike.Setup.Middleware.Components
@using cpike.Setup.Middleware.Services
@inherits SetupStepBase

<div class="step-content">
    <SetupAlert Severity="info">
        Please review your configuration below. Once you click "Complete Setup", the application will be initialized with these settings.
    </SetupAlert>

    <SummarySection
        Title="Administrator Account"
        Description="Primary administrator credentials"
        Items="@_adminSummaryItems" />

    <SummarySection
        Title="Database Connection"
        Description="Database configuration settings"
        Items="@_databaseSummaryItems" />

    @if (EmailNotificationsEnabled)
    {
        <SetupAlert Severity="success">
            Email notifications are enabled for important updates.
        </SetupAlert>
    }
</div>

@code {
    public override string Title => "Review & Complete";
    public override string Description => "Review your configuration and complete the setup.";
    public override int Order => 30;

    // Parameterless constructor for Blazor rendering
    public ReviewStep()
    {
    }

    // Constructor injection for when instance is created via DI (not rendered)
    public ReviewStep(ISetupStateManager stateManager, ILogger<ReviewStep> logger)
    {
        StateManager = stateManager;
        Logger = logger;
    }

    private string AdminEmail => StateManager?.Get<string>("AdminEmail") ?? "Not configured";
    private string ConnectionString => StateManager?.Get<string>("DatabaseConnectionString") ?? "Not configured";
    private bool EmailNotificationsEnabled => StateManager?.Get<bool?>("EmailNotifications") ?? false;

    private List<SummarySection.SummaryItem> _adminSummaryItems => new()
    {
        new SummarySection.SummaryItem
        {
            Label = "Email Address",
            Value = AdminEmail,
            IsSensitive = false
        },
        new SummarySection.SummaryItem
        {
            Label = "Password",
            Value = "••••••••",
            IsSensitive = true
        },
        new SummarySection.SummaryItem
        {
            Label = "Email Notifications",
            Value = EmailNotificationsEnabled ? "Enabled" : "Disabled",
            IsSensitive = false
        }
    };

    private List<SummarySection.SummaryItem> _databaseSummaryItems => new()
    {
        new SummarySection.SummaryItem
        {
            Label = "Connection String",
            Value = MaskedConnectionString,
            IsSensitive = true
        }
    };

    private string MaskedConnectionString
    {
        get
        {
            if (ConnectionString.Contains("Password="))
            {
                // Mask the password in the connection string for display
                return System.Text.RegularExpressions.Regex.Replace(
                    ConnectionString,
                    @"Password=[^;]+",
                    "Password=***");
            }
            return ConnectionString;
        }
    }

    public override Task<ValidationResult> ValidateAsync()
    {
        // No validation needed for review step
        return Task.FromResult(ValidationResult.Success);
    }

    public override Task ExecuteAsync()
    {
        Logger?.LogInformation("Setup review completed. Ready to finalize setup.");
        return Task.CompletedTask;
    }
}
