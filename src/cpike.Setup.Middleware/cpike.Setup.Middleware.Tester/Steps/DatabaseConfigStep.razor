@using cpike.Setup.Middleware.Steps
@using cpike.Setup.Middleware.Models
@using cpike.Setup.Middleware.Services
@using cpike.Setup.Middleware.Components
@inherits SetupStepBase

<div class="step-content">
    <SetupAlert Severity="info" Title="Database Configuration">
        Configure the database connection settings for your application. This connection will be used to store application data.
    </SetupAlert>

    <SetupInput
        Id="db-server"
        Label="Database Server"
        InputType="text"
        Value="@DatabaseServer"
        ValueChanged="@OnServerChanged"
        Placeholder="localhost"
        Required="true"
        ErrorMessage="@_serverError"
        HelpText="The hostname or IP address of your database server"
        Autocomplete="off" />

    <SetupInput
        Id="db-name"
        Label="Database Name"
        InputType="text"
        Value="@DatabaseName"
        ValueChanged="@OnNameChanged"
        Placeholder="MyApplicationDb"
        Required="true"
        ErrorMessage="@_nameError"
        HelpText="The name of the database to use"
        Autocomplete="off" />

    <SetupToggle
        Label="Use Windows Authentication"
        Description="Use Windows Authentication instead of SQL Server authentication"
        Checked="@UseWindowsAuth"
        CheckedChanged="@OnWindowsAuthChanged" />

    @if (!UseWindowsAuth)
    {
        <SetupInput
            Id="db-user"
            Label="Database Username"
            InputType="text"
            Value="@DatabaseUser"
            ValueChanged="@OnUserChanged"
            Placeholder="sa"
            Required="true"
            ErrorMessage="@_userError"
            HelpText="SQL Server authentication username"
            Autocomplete="username" />

        <SetupInput
            Id="db-password"
            Label="Database Password"
            InputType="password"
            Value="@DatabasePassword"
            ValueChanged="@OnPasswordChanged"
            Placeholder="Enter password"
            Required="true"
            ErrorMessage="@_passwordError"
            HelpText="SQL Server authentication password"
            Autocomplete="current-password" />
    }
</div>

@code {
    public override string Title => "Configure Database Connection";
    public override string Description => "Set up the database connection for your application.";
    public override int Order => 20;

    private string DatabaseServer { get; set; } = "localhost";
    private string DatabaseName { get; set; } = string.Empty;
    private bool UseWindowsAuth { get; set; } = false;
    private string DatabaseUser { get; set; } = string.Empty;
    private string DatabasePassword { get; set; } = string.Empty;

    private string? _serverError;
    private string? _nameError;
    private string? _userError;
    private string? _passwordError;

    // Parameterless constructor for Blazor rendering
    public DatabaseConfigStep()
    {
    }

    // Constructor injection for when instance is created via DI (not rendered)
    public DatabaseConfigStep(ISetupStateManager stateManager, ILogger<DatabaseConfigStep> logger)
    {
        StateManager = stateManager;
        Logger = logger;
    }

    protected override void OnInitialized()
    {
        // Restore values from state manager if they exist
        DatabaseServer = StateManager?.Get<string>("DatabaseServer") ?? "localhost";
        DatabaseName = StateManager?.Get<string>("DatabaseName") ?? string.Empty;
        UseWindowsAuth = StateManager?.Get<bool?>("UseWindowsAuth") ?? false;
        DatabaseUser = StateManager?.Get<string>("DatabaseUser") ?? string.Empty;
        DatabasePassword = StateManager?.Get<string>("DatabasePassword") ?? string.Empty;

        Logger?.LogInformation("DatabaseConfigStep.OnInitialized - Server: '{Server}', Database: '{Database}'",
            DatabaseServer, DatabaseName);
    }

    public override Task<ValidationResult> ValidateAsync()
    {
        // IMPORTANT: Load from StateManager because this method may be called
        // on a fresh instance that wasn't rendered (lifecycle methods not called)
        var dbServer = StateManager.Get<string>("DatabaseServer") ?? "localhost";
        var dbName = StateManager.Get<string>("DatabaseName") ?? string.Empty;
        var useWinAuth = StateManager.Get<bool?>("UseWindowsAuth") ?? false;
        var dbUser = StateManager.Get<string>("DatabaseUser") ?? string.Empty;
        var dbPassword = StateManager.Get<string>("DatabasePassword") ?? string.Empty;

        ClearErrors();
        var errors = new List<string>();

        if (string.IsNullOrWhiteSpace(dbServer))
        {
            _serverError = "Database server is required";
            errors.Add("Database server is required.");
        }

        if (string.IsNullOrWhiteSpace(dbName))
        {
            _nameError = "Database name is required";
            errors.Add("Database name is required.");
        }

        if (!useWinAuth)
        {
            if (string.IsNullOrWhiteSpace(dbUser))
            {
                _userError = "Username is required when not using Windows Authentication";
                errors.Add("Database username is required when not using Windows Authentication.");
            }

            if (string.IsNullOrWhiteSpace(dbPassword))
            {
                _passwordError = "Password is required when not using Windows Authentication";
                errors.Add("Database password is required when not using Windows Authentication.");
            }
        }

        if (errors.Any())
        {
            return Task.FromResult(ValidationResult.Failure(errors));
        }

        return Task.FromResult(ValidationResult.Success);
    }

    public override Task ExecuteAsync()
    {
        // Store values in state manager
        StateManager.Set("DatabaseServer", DatabaseServer);
        StateManager.Set("DatabaseName", DatabaseName);
        StateManager.Set("UseWindowsAuth", UseWindowsAuth);
        StateManager.Set("DatabaseUser", DatabaseUser);
        StateManager.Set("DatabasePassword", DatabasePassword);

        // Build connection string
        string connectionString;
        if (UseWindowsAuth)
        {
            connectionString = $"Server={DatabaseServer};Database={DatabaseName};Trusted_Connection=True;TrustServerCertificate=True;";
        }
        else
        {
            connectionString = $"Server={DatabaseServer};Database={DatabaseName};User Id={DatabaseUser};Password={DatabasePassword};TrustServerCertificate=True;";
        }

        // Store in state manager
        StateManager.Set("DatabaseConnectionString", connectionString);

        Logger.LogInformation("Database connection configured: Server={Server}, Database={Database}", DatabaseServer, DatabaseName);
        return Task.CompletedTask;
    }

    private void ClearErrors()
    {
        _serverError = null;
        _nameError = null;
        _userError = null;
        _passwordError = null;
    }

    private void OnServerChanged(string? value)
    {
        DatabaseServer = value ?? string.Empty;
        StateManager.Set("DatabaseServer", DatabaseServer);
        _serverError = null;
    }

    private void OnNameChanged(string? value)
    {
        DatabaseName = value ?? string.Empty;
        StateManager.Set("DatabaseName", DatabaseName);
        _nameError = null;
    }

    private void OnWindowsAuthChanged(bool value)
    {
        UseWindowsAuth = value;
        StateManager.Set("UseWindowsAuth", UseWindowsAuth);
        // Clear username/password errors when switching to Windows Auth
        if (UseWindowsAuth)
        {
            _userError = null;
            _passwordError = null;
        }
    }

    private void OnUserChanged(string? value)
    {
        DatabaseUser = value ?? string.Empty;
        StateManager.Set("DatabaseUser", DatabaseUser);
        _userError = null;
    }

    private void OnPasswordChanged(string? value)
    {
        DatabasePassword = value ?? string.Empty;
        StateManager.Set("DatabasePassword", DatabasePassword);
        _passwordError = null;
    }
}
